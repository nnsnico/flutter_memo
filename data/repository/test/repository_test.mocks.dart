// Mocks generated by Mockito 5.4.4 from annotations
// in repository/test/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:datastore/note_datasource.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:model/note.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteDataSource extends _i1.Mock implements _i3.NoteDataSource {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i5.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i2.Database>);

  @override
  set database(_i5.Future<_i2.Database>? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> delete(_i6.Note? value) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Database> initDatabase(String? tableName) =>
      (super.noSuchMethod(
        Invocation.method(
          #initDatabase,
          [tableName],
        ),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDatabase,
            [tableName],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.method(
            #initDatabase,
            [tableName],
          ),
        )),
      ) as _i5.Future<_i2.Database>);

  @override
  _i5.Future<void> insert(_i6.Note? value) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [value],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Note>?> queryAll() => (super.noSuchMethod(
        Invocation.method(
          #queryAll,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Note>?>.value(),
        returnValueForMissingStub: _i5.Future<List<_i6.Note>?>.value(),
      ) as _i5.Future<List<_i6.Note>?>);
}
